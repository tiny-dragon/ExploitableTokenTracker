import { ChangeEvent, useCallback, useEffect, useState } from "react";
import axios from "axios";
import {
  Button,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TablePagination,
  TableRow,
} from "@mui/material";
import styled from "styled-components";

export type Chain = {
  id: number;
  name: string;
};

export type Token = {
  id: number;
  tokenId: string;
  name: string;
  symbol: string;
  chainId: number;
  address: string;
  has1: number;
};

export enum TokenStatus {
  NotVerified = 0,
  Good = 1,
  Can = 2,
  Exploitable = 3,
}

const FlagColor = ["#ce93d8", "#388e3c", "#f57c00", "#d32f2f"];

const S = {
  Link: styled.a`
    color: #0288d1;
    &:hover {
      text-decoration: underline;
    }
  `,
  Flag: styled.span<{ status: number }>`
    background: ${({ status }) => FlagColor[status]};
    padding: 4px 8px;
    color: white;
    border-radius: 8px;
  `,
  ActionPanel: styled.div`
    display: flex;
    gap: 16px;
  `,
};

export default function Home() {
  const [tokens, setTokens] = useState<Token[]>([]);
  const [count, setCount] = useState(0);
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(50);

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(+event.target.value);
    setPage(0);
  };

  const fetchTokens = useCallback(async () => {
    const response = await axios.get(
      `/api/tokens?page=${page}&rowsPerPage=${rowsPerPage}`
    );
    setTokens(response.data.tokens || []);
    setCount(response.data.count);
  }, [page, rowsPerPage]);

  useEffect(() => {
    fetchTokens();
  }, [fetchTokens]);

  const handleAction = async (id: number, status: number) => {
    const response = await axios.post("/api/tokens", { id, status });
    fetchTokens();
  };

  return (
    <Paper
      sx={{
        width: "100%",
        height: "100vh",
        overflow: "hidden",
        padding: "40px 60px",
      }}
    >
      <TableContainer sx={{ maxHeight: "90%", margin: "auto" }}>
        <Table sx={{ minWidth: 650 }} aria-label="simple table" stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell>No</TableCell>
              <TableCell>Token Name</TableCell>
              <TableCell>Symbol</TableCell>
              <TableCell>Address</TableCell>
              <TableCell align="center">Status</TableCell>
              <TableCell align="center">Manual Action</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {tokens.map((token, index) => (
              <TableRow
                key={`${token.address}-${index}`}
                sx={{ "&:last-child td, &:last-child th": { border: 0 } }}
              >
                <TableCell component="th" scope="row">
                  {page * rowsPerPage + index + 1}
                </TableCell>
                <TableCell>{token.name}</TableCell>
                <TableCell>{token.symbol}</TableCell>
                <TableCell>
                  <S.Link
                    href={`https://bscscan.com/token/${token.address}`}
                    target="_blank"
                  >
                    {token.address}
                  </S.Link>
                </TableCell>
                <TableCell align="center">
                  <S.Flag status={token.has1}>
                    {(() => {
                      if (token.has1 === TokenStatus.Exploitable)
                        return "Exploitable";
                      if (token.has1 === TokenStatus.Good) return "Good";
                      if (token.has1 === TokenStatus.Can) return "Possible";
                      return "Not Verified";
                    })()}
                  </S.Flag>
                </TableCell>
                <TableCell align="center">
                  {(token.has1 === TokenStatus.Can ||
                    token.has1 === TokenStatus.Exploitable) && (
                    <S.ActionPanel>
                      <Button
                        variant="contained"
                        color="error"
                        onClick={() =>
                          handleAction(token.id, TokenStatus.Exploitable)
                        }
                      >
                        Exploitable
                      </Button>
                      <Button
                        variant="contained"
                        color="success"
                        onClick={() => handleAction(token.id, TokenStatus.Good)}
                      >
                        Good
                      </Button>
                    </S.ActionPanel>
                  )}
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        rowsPerPageOptions={[50, 100, 150]}
        component="div"
        count={count}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </Paper>
  );
}
